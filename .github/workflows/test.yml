name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  backend-tests:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: pgvector/pgvector:pg15
        env:
          POSTGRES_USER: parakeet
          POSTGRES_PASSWORD: parakeetdb123
          POSTGRES_DB: music_analyzer_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
      
      minio:
        image: minio/minio:latest
        env:
          MINIO_ROOT_USER: minioadmin
          MINIO_ROOT_PASSWORD: minio123456
        ports:
          - 9000:9000
        options: --health-cmd "curl -f http://localhost:9000/minio/health/live"
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libsndfile1 ffmpeg
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-asyncio pytest-cov aiohttp
        pip install -r requirements.txt || true
    
    - name: Run backend unit tests
      env:
        DATABASE_URL: postgresql+asyncpg://parakeet:parakeetdb123@localhost:5432/music_analyzer_test
        REDIS_URL: redis://localhost:6379
        MINIO_HOST: localhost
        MINIO_PORT: 9000
        MINIO_ACCESS_KEY: minioadmin
        MINIO_SECRET_KEY: minio123456
      run: |
        python -m pytest test_music_analyzer_api.py -v --cov=music_analyzer_api --cov-report=xml --cov-report=term
    
    - name: Run system integration tests
      env:
        TEST_API_URL: http://localhost:8000/api/v2
        TEST_USERNAME: testuser
        TEST_PASSWORD: testpass
      run: |
        # Start the API server in background
        python music_analyzer_api.py &
        API_PID=$!
        
        # Wait for server to start
        sleep 10
        
        # Run integration tests
        python test_system_integration.py
        
        # Stop the API server
        kill $API_PID
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: backend
        name: backend-coverage

  frontend-tests:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Use Node.js 18
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: music-analyzer-frontend/package-lock.json
    
    - name: Install dependencies
      working-directory: ./music-analyzer-frontend
      run: npm ci
    
    - name: Run frontend tests
      working-directory: ./music-analyzer-frontend
      run: npm test -- --coverage --watchAll=false
    
    - name: Check test coverage
      working-directory: ./music-analyzer-frontend
      run: |
        npm test -- --coverage --watchAll=false --coverageThreshold='{"global":{"branches":90,"functions":90,"lines":90,"statements":90}}'
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        directory: ./music-analyzer-frontend/coverage
        flags: frontend
        name: frontend-coverage

  lint-and-type-check:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install Python linting tools
      run: |
        pip install black flake8 mypy
    
    - name: Run Python linting
      run: |
        black --check *.py
        flake8 *.py --max-line-length=100 --ignore=E501,W503
    
    - name: Use Node.js 18
      uses: actions/setup-node@v3
      with:
        node-version: '18'
    
    - name: Install frontend dependencies
      working-directory: ./music-analyzer-frontend
      run: npm ci
    
    - name: Run TypeScript type checking
      working-directory: ./music-analyzer-frontend
      run: npx tsc --noEmit
    
    - name: Run ESLint
      working-directory: ./music-analyzer-frontend
      run: npx eslint src --ext .ts,.tsx

  docker-build:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Build backend Docker image
      run: |
        docker build -f Dockerfile -t music-analyzer-backend .
    
    - name: Build frontend Docker image
      run: |
        docker build -f music-analyzer-frontend/Dockerfile -t music-analyzer-frontend ./music-analyzer-frontend

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Run Trivy security scan
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'